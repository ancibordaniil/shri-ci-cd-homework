name: Deploy to Prod

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Версия образа"
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      REGISTRY: cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app
      VERSION: ${{ github.event.inputs.version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Yandex CLI
        run: |
          echo "=== Installing Yandex CLI ==="
          curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
          export PATH=$HOME/.yandex-cloud/bin:$PATH
          echo "=== Yandex CLI version ==="
          yc --version

      - name: Authenticate with Yandex CLI and login to Yandex Container Registry
        env:
          YC_SERVICE_KEY: ${{ secrets.YC_SERVICE_KEY }}
        run: |
          echo "=== Saving YC_SERVICE_KEY to key.json ==="
          printf '%s' "$YC_SERVICE_KEY" > key.json
          echo "=== Contents of key.json ==="
          cat key.json
          echo "=== Validating key.json with jq ==="
          jq . key.json

          echo "=== Creating IAM token ==="
          TOKEN=$(yc iam create-token --key-file key.json)
          if [ -z "$TOKEN" ]; then
            echo "Error: Failed to get IAM token"
            exit 1
          fi
          echo "IAM token obtained (hidden for security)"

          echo "=== Logging in to Yandex Container Registry ==="
          echo "$TOKEN" | docker login --username oauth --password-stdin cr.yandex
          echo "Docker login successful"

      - name: Deploy on remote server via SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VM_IP }}
          username: ${{ secrets.VM_SSH_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          script: |
            echo "=== Saving YC_SERVICE_KEY to key.json on server ==="
            printf '%s' '${{ secrets.YC_SERVICE_KEY }}' > key.json
            echo "=== Contents of key.json on server ==="
            cat key.json
            echo "=== Validating key.json on server with jq ==="
            jq . key.json || { echo "jq validation failed on server"; exit 1; }

            echo "=== Creating IAM token on server ==="
            TOKEN=$(yc iam create-token --key-file key.json)
            if [ -z "$TOKEN" ]; then
              echo "Error: Failed to get IAM token on server"
              exit 1
            fi
            echo "IAM token obtained on server (hidden)"

            echo "=== Logging in to Yandex Container Registry on server ==="
            echo "$TOKEN" | docker login --username oauth --password-stdin cr.yandex
            echo "Docker login successful on server"

            echo "=== Stopping old container if exists ==="
            docker stop app || echo "No container to stop"

            echo "=== Removing old container if exists ==="
            docker rm app || echo "No container to remove"

            echo "=== Pulling new image $REGISTRY:${VERSION}_latest ==="
            docker pull $REGISTRY:${VERSION}_latest

            echo "=== Starting new container ==="
            docker run -d --name app -p 80:3000 $REGISTRY:${VERSION}_latest

            echo "=== Deployment completed successfully ==="
