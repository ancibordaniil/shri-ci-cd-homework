name: Release

on:
  workflow_dispatch:

permissions:
  contents: write
  issues: write

env:
  REGISTRY: cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app

jobs:
  release:
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ github.run_number }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Run tests
        run: npm test

      - name: Create release branch
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "ci@example.com"
          git checkout -b releases/${VERSION}
          git push origin releases/${VERSION}

      - name: Get access token from refresh token
        id: yandex-auth
        run: |
          echo "=== Получаем access_token по refresh_token ==="
          RESPONSE=$(curl -s -X POST https://oauth.yandex.ru/token \
            -d grant_type=refresh_token \
            -d refresh_token=${{ secrets.YANDEX_REFRESH_TOKEN }} \
            -d client_id=${{ secrets.YANDEX_CLIENT_ID }} \
            -d client_secret=${{ secrets.YANDEX_CLIENT_SECRET }})

          echo "$RESPONSE"
          ACCESS_TOKEN=$(echo "$RESPONSE" | jq -r .access_token)

          if [ "$ACCESS_TOKEN" = "null" ]; then
            echo "❌ Не удалось получить access_token"
            exit 1
          fi

          echo "::add-mask::$ACCESS_TOKEN"
          echo "ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV

      - name: Login to Yandex Container Registry
        run: |
          echo "$ACCESS_TOKEN" | docker login --username oauth --password-stdin cr.yandex

      - name: Build Docker image
        run: |
          docker build -t $REGISTRY:${VERSION} -t $REGISTRY:${VERSION}_latest .

      - name: Push Docker images
        run: |
          docker push $REGISTRY:${VERSION}
          docker push $REGISTRY:${VERSION}_latest

      - name: Create git tag
        run: |
          git tag ${VERSION}
          git push origin ${VERSION}

      - name: Generate commit list
        id: changelog
        run: |
          git fetch --tags
          PREV=$(git tag --sort=-creatordate | grep -E '^[0-9]+$' | head -n1)
          git log $PREV..HEAD --oneline > commits.txt
          echo "COMMITS<<EOF" >> $GITHUB_ENV
          cat commits.txt >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create GitHub Issue for release
        env:
          COMMITS: ${{ env.COMMITS }}
        run: |
          gh issue create \
            --title "Release $VERSION" \
            --body "**Дата:** $(date)\n**Автор:** ${{ github.actor }}\n**Версия:** $VERSION\n\n**Коммиты:**\n${COMMITS}\n\nDocker: $REGISTRY:$VERSION"
